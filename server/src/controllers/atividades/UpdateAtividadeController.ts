import { Request, Response } from "express";
import { PrismaAtividadesRepository } from "../../repositories/prisma/atividades/prisma-atividades-repository";
import { PrismaConteudosRepository } from "../../repositories/prisma/conteudos/prisma-conteudo-repository";
import { UpdateAtividadeService } from "../../services/atividades/UpdateAtividadeService";

import { PrismaQuestoesRepository } from "../../repositories/prisma/questoes/prisma-questoes-repository";
import { CreateQuestaoService } from "../../services/questoes/CreateQuestaoService";

import { PrismaOpcoesRepository } from "../../repositories/prisma/opcoes/prisma-opcoes-repository";
import { CreateManyOpcoesService } from "../../services/opcoes/CreateManyOpcoesService";

import { PrismaAtividadeHasQuestoesRepository } from "../../repositories/prisma/atividades/prisma-atividade-has-questoes-repository";
import { CreateAtividadeHasQuestoesService } from "../../services/atividades/atividade-has-questoes/CreateAtividadeHasQuestoesService";
import { DeleteManyAtividadeHasQuestoesByAtividadeService } from "../../services/atividades/atividade-has-questoes/DeleteManyAtividadeHasQuestoesByAtividadeService";


//         Ol√°, meu amigo
// ‚†Ä‚†Ä‚†ò‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä
// ‚†Ä‚†Ä‚†Ä‚†ë‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°î‚†Å‚†Ä‚†Ä‚†Ä
// ‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†¢‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†¥‚†ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
// ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†§‚†Ñ‚†í‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
// ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ä‚†Ñ‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
// ‚†Ä
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†õ‚†õ‚†ã‚†â‚†à‚†â‚†â‚†â‚†â‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚°è‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚¢è‚£¥‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø
// ‚£ø‚£ø‚£ü‚£æ‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢¢‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ü‚†Ä‚°¥‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø
// ‚£ø‚£ø‚£ø‚†ü‚†ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚¢¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø
// ‚£ø‚£Å‚°Ä‚†Ä‚†Ä‚¢∞‚¢†‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚£¥‚£∂‚£ø‚°Ñ‚£ø
// ‚£ø‚°ã‚†Ä‚†Ä‚†Ä‚†é‚¢∏‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ó‚¢ò‚£ø‚£ü‚†õ‚†ø‚£º
// ‚£ø‚£ø‚†ã‚¢Ä‚°å‚¢∞‚£ø‚°ø‚¢ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ß‚¢Ä‚£º
// ‚£ø‚£ø‚£∑‚¢ª‚†Ñ‚†ò‚†õ‚†ã‚†õ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚†à‚†â‚†ô‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ß‚†Ä‚†à‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢É‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚°ø‚†Ä‚†¥‚¢ó‚£†‚£§‚£¥‚°∂‚†∂‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°∏‚†Ä‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚°Ä‚¢†‚£æ‚£ø‚†è‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†â‚†Ä‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ß‚†à‚¢π‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†à‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚°ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Å‚†Ä‚†Ä‚†π‚£ø‚†É‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
// ‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†â‚†â‚†Å‚†Ä‚¢ª‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†à‚£ø‚£ø‚°ø‚†â‚†õ‚†õ‚†õ‚†â‚†â
// ‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚°¥‚£∏‚£ø‚£á‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ø‚†Ñ‚†ô‚†õ‚†Ä‚£Ä‚£†‚£§‚£§‚†Ñ‚†Ä

// # Funcionamento do c√≥digo
// Ser√£o chamados v√°rios Services:
//
//  1 - "Create Atividade", para criar a atividade com dados b√°sicos, que s√£o:
//      * title, description, thumb, id_serie, id_disciplina
//  2 - "Create Quest√£o", para criar uma quest√£o:
//      * title, question_type, grade, difficulty, id_disciplina
//  3 - "Create Op√ß√£o", para criar as op√ß√µes de uma quest√£o:
//      * descripition, is_correct, id_questao
//  4 - "Create Atividade_has_Quest√µes", criar o relacionamento entre as atividades e as quest√µes
//      * id_atividade, id_questao

// MENSAGEM PARA O NETO DO FUTURO:
//  ele n√£o ta retornando o json
// verificar aonde retornar

class UpdateAtividadeController {
  async handle(req:Request, res:Response) {

    // Dados do par√¢metro da requisi√ß√£o
    const { id } = req.params;

    // 1 - CRIANDO ATIVIDADE ================================================================================================================

    // Dados do corpo da requisi√ß√£o
    const { title, id_serie, id_disciplina } = req.body;

    // Reposit√≥rio do modelo do prisma
    const prismaAtividadesRepository = new PrismaAtividadesRepository();
    const prismaConteudosRepository = new PrismaConteudosRepository();
    
    const updateAtividadeService = new UpdateAtividadeService(prismaAtividadesRepository, prismaConteudosRepository);

    // const thumb = "https://storage.googleapis.com/mrt-mais-educacao-dev-midias/Atividade.png";
    
    // Executando o service
    const atividade = await updateAtividadeService.execute({
      id,
      title,
      // thumb,
      id_serie,
      id_disciplina
    })
    
    // Caso aconte√ßa algum erro, interrompe o processo retorna a mensagem de erro
    if(atividade instanceof Error) {
        return res.status(400).send(atividade.message);
    }
    
    // 2 - CRIANDO A QUEST√ÉO ================================================================================================================
    
    // Dados do corpo da requisi√ß√£o
    const { questions } = req.body;


    // Na hora de atualizar as quest√µes da atividade, existem 2 casos
    // 1 - Trocar a quest√£o
    // 2 - Editar a quest√£o

    // 1 - Trocar a quest√£o
    //    - Ele simplesmente exclui o relacionamento entre a atividade e a quest√£o
    
    // 2 - Editar a quest√£o
    //    - Ele edita a quest√£o üëç


    // A vari√°vel "questions" √© opcional, portanto, o service seguinte s√≥ √© chamado caso ela n√£o seja nula
    if (questions && questions.length != 0) {
      
      // Reposit√≥rio das quest√µes
      const prismaQuestoesRepository = new PrismaQuestoesRepository();    
      const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();    

      // Service para excluir o relacionamento
      const deleteManyAtividadeHasQuestoesByAtividadeService = new DeleteManyAtividadeHasQuestoesByAtividadeService(prismaAtividadeHasQuestoesRepository, prismaAtividadesRepository);
      
      // Service para excluir o relacionamento entre a atividade e as quest√µes
      try {
        const data = await deleteManyAtividadeHasQuestoesByAtividadeService.execute({ id_atividade: id });

        if (data instanceof Error) {
          return new Error("Erro ao apagar o relacionamento entre a atividade e as quest√µes")
        }
        // let questoes_apagas = await delete

      } catch (err) {
        return new Error("Erro ao buscar as quest√µes desta atividade!")
      }

      // // Apagando as quest√µes atuais
      // try {
      //   let questao_apagada = await deleteQuestaoService.execute({ id: question.id })
    
      //   if (questao_apagada instanceof Error) {
      //     return new Error("Erro ao apagar quest√£o")
      //   }
      // } catch (err) {

      // }

        try {
          // Inst√¢ncia do service
          const createQuestaoService = new CreateQuestaoService(prismaQuestoesRepository);
      
          for (let item of questions) {
            
            try {
                // Executando o service
                const questao = await createQuestaoService.execute({
                    title: item.title_question,
                    question_type: item.question_type,
                    id_disciplina,
                    grade: 10,
                    difficulty: "normal"
                })
    
                // 3 - CRIANDO AS OP√á√ïES =====================================================================================================
    
                // Reposit√≥rio das op√ß√µes
                const prismaOpcoesRepository = new PrismaOpcoesRepository();    
                const prismaQuestoesRepository = new PrismaQuestoesRepository();    
    
                // Inst√¢ncia do service
                const createManyOpcoesService = new CreateManyOpcoesService(prismaOpcoesRepository, prismaQuestoesRepository);
    
                for (let item1 of item.options) {
                    item1.id_questao = Object(questao).id;
                }
    
                try {
                    const opcoes = await createManyOpcoesService.execute({
                        array_opcao: item.options
                    });  
                    
                } catch (err) {
                  return err;
                }
                
                // 4 - RELACIONANDO A QUEST√ÉO COM A ATIVIDADE
    
                // Reposit√≥rio do atividade_has_quest√µes
                const prismaAtividadeHasQuestoesRepository = new PrismaAtividadeHasQuestoesRepository();    
    
                // Inst√¢ncia do service
                const createAtividadeHasQuestoes = new CreateAtividadeHasQuestoesService(prismaAtividadesRepository, prismaQuestoesRepository, prismaAtividadeHasQuestoesRepository);
                
                try {
                  let atividadehasQuestoes = await createAtividadeHasQuestoes.execute({
                    id_atividade: Object(atividade).id,
                    id_questao: Object(questao).id
                  })
  
                  if (atividadehasQuestoes instanceof Error) {
                    return new Error("Erro ao relacionar as quest√µes da atividade!");
                  }
  
                } catch (err) {
                  return err;
                }
    
              } catch (err) {
                  return err;
              }
          }
  
        } catch (err) {
          return new Error("Erro ao deletar quest√£o");
        }

    }
    
    // Retornando mensagem de sucesso para o usu√°rio
    return res.status(201).send(
      {
        message:"Criado com sucesso!",
      }
    );
  }
}

export { UpdateAtividadeController };